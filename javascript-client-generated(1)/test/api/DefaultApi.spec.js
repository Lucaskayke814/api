/*
 * SEI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.42
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Sei);
  }
}(this, function(expect, Sei) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Sei.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('concluirProcessoPost', function() {
        it('should call concluirProcessoPost successfully', function(done) {
          // TODO: uncomment, update parameter values for concluirProcessoPost call
          /*
          var opts = {};
          opts.payload = new Sei.Payload2();
          opts.payload.siglaSistema = "";
          opts.payload.identificacaoServico = "";
          opts.payload.idUnidade = "";
          opts.payload.protocoloProcedimento = "";

          instance.concluirProcessoPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('consultarProcedimentoPost', function() {
        it('should call consultarProcedimentoPost successfully', function(done) {
          // TODO: uncomment, update parameter values for consultarProcedimentoPost call
          /*
          var opts = {};
          opts.payload = new Sei.Payload3();
          opts.payload.siglaSistema = "";
          opts.payload.identificacaoServico = "";
          opts.payload.idUnidade = "";
          opts.payload.protocoloProcedimento = "";

          instance.consultarProcedimentoPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('criarProcessoPost', function() {
        it('should call criarProcessoPost successfully', function(done) {
          // TODO: uncomment, update parameter values for criarProcessoPost call
          /*
          var opts = {};
          opts.payload = new Sei.Payload();
          opts.payload.siglaSistema = "";
          opts.payload.identificacaoServico = "";
          opts.payload.idUnidade = "";
          opts.payload.idTipoProcedimento = "";
          opts.payload.nivelAcesso = "";

          instance.criarProcessoPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('gerarProcedimentoPost', function() {
        it('should call gerarProcedimentoPost successfully', function(done) {
          // TODO: uncomment, update parameter values for gerarProcedimentoPost call
          /*
          var opts = {};
          opts.payload = new Sei.Payload5();
          opts.payload.siglaSistema = "";
          opts.payload.identificacaoServico = "";
          opts.payload.idUnidade = "";
          opts.payload.idTipoProcedimento = "";

          instance.gerarProcedimentoPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('incluirDocumentoPost', function() {
        it('should call incluirDocumentoPost successfully', function(done) {
          // TODO: uncomment, update parameter values for incluirDocumentoPost call
          /*
          var opts = {};
          opts.payload = new Sei.Payload1();
          opts.payload.siglaSistema = "";
          opts.payload.identificacaoServico = "";
          opts.payload.idUnidade = "";
          opts.payload.tipo = "";
          opts.payload.idProcedimento = "";
          opts.payload.idSerie = "";
          opts.payload.numero = "";
          opts.payload.data = "";
          opts.payload.descricao = "";
          opts.payload.sigla = "";
          opts.payload.nome = "";
          opts.payload.nomeArquivo = "";
          opts.payload.conteudo = "";

          instance.incluirDocumentoPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reabrirProcessoPost', function() {
        it('should call reabrirProcessoPost successfully', function(done) {
          // TODO: uncomment, update parameter values for reabrirProcessoPost call
          /*
          var opts = {};
          opts.payload = new Sei.Payload4();
          opts.payload.siglaSistema = "";
          opts.payload.identificacaoServico = "";
          opts.payload.idUnidade = "";
          opts.payload.protocoloProcedimento = "";

          instance.reabrirProcessoPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
